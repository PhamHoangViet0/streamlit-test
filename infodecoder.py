# decoding widthes and checking checksum

# currently works with widthes like (411131), not with patterns (11110101110)
# currently displays special symbols like <FNC1>

# https://en.wikipedia.org/wiki/Code_128#Bar_code_widths
DICT = {
    '212222': [' ', ' ', '00'],
    '222122': ['!', '!', '01'],
    '222221': ['\"', '\"', '02'],
    '121223': ['#', '#', '03'],
    '121322': ['$', '$', '04'],
    '131222': ['%', '%', '05'],
    '122213': ['&', '&', '06'],
    '122312': ['\'', '\'', '07'],
    '132212': ['(', '(', '08'],
    '221213': [')', ')', '09'],
    '221312': ['*', '*', '10'],
    '231212': ['+', '+', '11'],
    '112232': [',', ',', '12'],
    '122132': ['-', '-', '13'],
    '122231': ['.', '.', '14'],
    '113222': ['/', '/', '15'],
    '123122': ['0', '0', '16'],
    '123221': ['1', '1', '17'],
    '223211': ['2', '2', '18'],
    '221132': ['3', '3', '19'],
    '221231': ['4', '4', '20'],
    '213212': ['5', '5', '21'],
    '223112': ['6', '6', '22'],
    '312131': ['7', '7', '23'],
    '311222': ['8', '8', '24'],
    '321122': ['9', '9', '25'],
    '321221': [':', ':', '26'],
    '312212': [';', ';', '27'],
    '322112': ['<', '<', '28'],
    '322211': ['=', '=', '29'],
    '212123': ['>', '>', '30'],
    '212321': ['?', '?', '31'],
    '232121': ['@', '@', '32'],
    '111323': ['A', 'A', '33'],
    '131123': ['B', 'B', '34'],
    '131321': ['C', 'C', '35'],
    '112313': ['D', 'D', '36'],
    '132113': ['E', 'E', '37'],
    '132311': ['F', 'F', '38'],
    '211313': ['G', 'G', '39'],
    '231113': ['H', 'H', '40'],
    '231311': ['I', 'I', '41'],
    '112133': ['J', 'J', '42'],
    '112331': ['K', 'K', '43'],
    '132131': ['L', 'L', '44'],
    '113123': ['M', 'M', '45'],
    '113321': ['N', 'N', '46'],
    '133121': ['O', 'O', '47'],
    '313121': ['P', 'P', '48'],
    '211331': ['Q', 'Q', '49'],
    '231131': ['R', 'R', '50'],
    '213113': ['S', 'S', '51'],
    '213311': ['T', 'T', '52'],
    '213131': ['U', 'U', '53'],
    '311123': ['V', 'V', '54'],
    '311321': ['W', 'W', '55'],
    '331121': ['X', 'X', '56'],
    '312113': ['Y', 'Y', '57'],
    '312311': ['Z', 'Z', '58'],
    '332111': ['[', '[', '59'],
    '314111': ['\\', '\\', '60'],
    '221411': [']', ']', '61'],
    '431111': ['^', '^', '62'],
    '111224': ['_', '_', '63'],
    '111422': ['<NUL>', '`', '64'],
    '121124': ['<SOH>', 'a', '65'],
    '121421': ['<STX>', 'b', '66'],
    '141122': ['<ETX>', 'c', '67'],
    '141221': ['<EOT>', 'd', '68'],
    '112214': ['<ENQ>', 'e', '69'],
    '112412': ['<ACK>', 'f', '70'],
    '122114': ['<BEL>', 'g', '71'],
    '122411': ['<BS>', 'h', '72'],
    '142112': ['<HT>', 'i', '73'],
    '142211': ['<LF>', 'j', '74'],
    '241211': ['<VT>', 'k', '75'],
    '221114': ['<FF>', 'l', '76'],
    '413111': ['<CR>', 'm', '77'],
    '241112': ['<SO>', 'n', '78'],
    '134111': ['<SI>', 'o', '79'],
    '111242': ['<DLE>', 'p', '80'],
    '121142': ['<DC1>', 'q', '81'],
    '121241': ['<DC2>', 'r', '82'],
    '114212': ['<DC3>', 's', '83'],
    '124112': ['<DC4>', 't', '84'],
    '124211': ['<NAK>', 'u', '85'],
    '411212': ['<SYN>', 'v', '86'],
    '421112': ['<ETB>', 'w', '87'],
    '421211': ['<CAN>', 'x', '88'],
    '212141': ['<EM>', 'y', '89'],
    '214121': ['<SUB>', 'z', '90'],
    '412121': ['<ESC>', '{', '91'],
    '111143': ['<FS>', '|', '92'],
    '111341': ['<GS>', '}', '93'],
    '131141': ['<RS>', '~', '94'],
    '114113': ['<US>', '<DEL>', '95'],
    '114311': ['<FNC3>', '<FUNC3>', '96'],
    '411113': ['<FNC2>', '<FUNC2>', '97'],
    '411311': ['<ShiftB>', '<ShiftA>', '98'],
    '113141': ['<CodeC>', '<CodeC>', '99'],
    '114131': ['<CodeB>', '<FNC4>', '<CodeB>'],
    '311141': ['<FNC4>', '<CodeA>', '<CodeA>'],
    '411131': ['<FNC1>', '<FNC1>', '<FNC1>'],
    '211412': ['<StartCodeA>', '<StartCodeA>', '<StartCodeA>'],
    '211214': ['<StartCodeB>', '<StartCodeB>', '<StartCodeB>'],
    '211232': ['<StartCodeC>', '<StartCodeC>', '<StartCodeC>'],
    '233111': ['<Stop>', '<Stop>', '<Stop>'],
}

CODE_TO_IDX = {
    '212222': 0,
    '222122': 1,
    '222221': 2,
    '121223': 3,
    '121322': 4,
    '131222': 5,
    '122213': 6,
    '122312': 7,
    '132212': 8,
    '221213': 9,
    '221312': 10,
    '231212': 11,
    '112232': 12,
    '122132': 13,
    '122231': 14,
    '113222': 15,
    '123122': 16,
    '123221': 17,
    '223211': 18,
    '221132': 19,
    '221231': 20,
    '213212': 21,
    '223112': 22,
    '312131': 23,
    '311222': 24,
    '321122': 25,
    '321221': 26,
    '312212': 27,
    '322112': 28,
    '322211': 29,
    '212123': 30,
    '212321': 31,
    '232121': 32,
    '111323': 33,
    '131123': 34,
    '131321': 35,
    '112313': 36,
    '132113': 37,
    '132311': 38,
    '211313': 39,
    '231113': 40,
    '231311': 41,
    '112133': 42,
    '112331': 43,
    '132131': 44,
    '113123': 45,
    '113321': 46,
    '133121': 47,
    '313121': 48,
    '211331': 49,
    '231131': 50,
    '213113': 51,
    '213311': 52,
    '213131': 53,
    '311123': 54,
    '311321': 55,
    '331121': 56,
    '312113': 57,
    '312311': 58,
    '332111': 59,
    '314111': 60,
    '221411': 61,
    '431111': 62,
    '111224': 63,
    '111422': 64,
    '121124': 65,
    '121421': 66,
    '141122': 67,
    '141221': 68,
    '112214': 69,
    '112412': 70,
    '122114': 71,
    '122411': 72,
    '142112': 73,
    '142211': 74,
    '241211': 75,
    '221114': 76,
    '413111': 77,
    '241112': 78,
    '134111': 79,
    '111242': 80,
    '121142': 81,
    '121241': 82,
    '114212': 83,
    '124112': 84,
    '124211': 85,
    '411212': 86,
    '421112': 87,
    '421211': 88,
    '212141': 89,
    '214121': 90,
    '412121': 91,
    '111143': 92,
    '111341': 93,
    '131141': 94,
    '114113': 95,
    '114311': 96,
    '411113': 97,
    '411311': 98,
    '113141': 99,
    '114131': 100,
    '311141': 101,
    '411131': 102,
    '211412': 103,
    '211214': 104,
    '211232': 105,
    '233111': 106,
}  # width to index

VALUES = [
    [' ', ' ', '00'],
    ['!', '!', '01'],
    ['\"', '\"', '02'],
    ['#', '#', '03'],
    ['$', '$', '04'],
    ['%', '%', '05'],
    ['&', '&', '06'],
    ['\'', '\'', '07'],
    ['(', '(', '08'],
    [')', ')', '09'],
    ['*', '*', '10'],
    ['+', '+', '11'],
    [',', ',', '12'],
    ['-', '-', '13'],
    ['.', '.', '14'],
    ['/', '/', '15'],
    ['0', '0', '16'],
    ['1', '1', '17'],
    ['2', '2', '18'],
    ['3', '3', '19'],
    ['4', '4', '20'],
    ['5', '5', '21'],
    ['6', '6', '22'],
    ['7', '7', '23'],
    ['8', '8', '24'],
    ['9', '9', '25'],
    [':', ':', '26'],
    [';', ';', '27'],
    ['<', '<', '28'],
    ['=', '=', '29'],
    ['>', '>', '30'],
    ['?', '?', '31'],
    ['@', '@', '32'],
    ['A', 'A', '33'],
    ['B', 'B', '34'],
    ['C', 'C', '35'],
    ['D', 'D', '36'],
    ['E', 'E', '37'],
    ['F', 'F', '38'],
    ['G', 'G', '39'],
    ['H', 'H', '40'],
    ['I', 'I', '41'],
    ['J', 'J', '42'],
    ['K', 'K', '43'],
    ['L', 'L', '44'],
    ['M', 'M', '45'],
    ['N', 'N', '46'],
    ['O', 'O', '47'],
    ['P', 'P', '48'],
    ['Q', 'Q', '49'],
    ['R', 'R', '50'],
    ['S', 'S', '51'],
    ['T', 'T', '52'],
    ['U', 'U', '53'],
    ['V', 'V', '54'],
    ['W', 'W', '55'],
    ['X', 'X', '56'],
    ['Y', 'Y', '57'],
    ['Z', 'Z', '58'],
    ['[', '[', '59'],
    ['\\', '\\', '60'],
    [']', ']', '61'],
    ['^', '^', '62'],
    ['_', '_', '63'],
    ['<NUL>', '`', '64'],
    ['<SOH>', 'a', '65'],
    ['<STX>', 'b', '66'],
    ['<ETX>', 'c', '67'],
    ['<EOT>', 'd', '68'],
    ['<ENQ>', 'e', '69'],
    ['<ACK>', 'f', '70'],
    ['<BEL>', 'g', '71'],
    ['<BS>', 'h', '72'],
    ['<HT>', 'i', '73'],
    ['<LF>', 'j', '74'],
    ['<VT>', 'k', '75'],
    ['<FF>', 'l', '76'],
    ['<CR>', 'm', '77'],
    ['<SO>', 'n', '78'],
    ['<SI>', 'o', '79'],
    ['<DLE>', 'p', '80'],
    ['<DC1>', 'q', '81'],
    ['<DC2>', 'r', '82'],
    ['<DC3>', 's', '83'],
    ['<DC4>', 't', '84'],
    ['<NAK>', 'u', '85'],
    ['<SYN>', 'v', '86'],
    ['<ETB>', 'w', '87'],
    ['<CAN>', 'x', '88'],
    ['<EM>', 'y', '89'],
    ['<SUB>', 'z', '90'],
    ['<ESC>', '{', '91'],
    ['<FS>', '|', '92'],
    ['<GS>', '}', '93'],
    ['<RS>', '~', '94'],
    ['<US>', '<DEL>', '95'],
    ['<FNC3>', '<FUNC3>', '96'],
    ['<FNC2>', '<FUNC2>', '97'],
    ['<ShiftB>', '<ShiftA>', '98'],
    ['<CodeC>', '<CodeC>', '99'],
    ['<CodeB>', '<FNC4>', '<CodeB>'],
    ['<FNC4>', '<CodeA>', '<CodeA>'],
    ['<FNC1>', '<FNC1>', '<FNC1>'],
    ['<StartCodeA>', '<StartCodeA>', '<StartCodeA>'],
    ['<StartCodeB>', '<StartCodeB>', '<StartCodeB>'],
    ['<StartCodeC>', '<StartCodeC>', '<StartCodeC>'],
    ['<Stop>', '<Stop>', '<Stop>'],
    ['<>', '<>', '<>']
]  # index to symbol


def infodecoder(symcodes, checksum=True):
    result = ''
    codes = []

    # transform widthes from lists to str
    for symcode in symcodes:
        sym = ''
        for i in symcode:
            sym += str(i)
        codes.append(sym)

    # get indexes
    index = [CODE_TO_IDX[symcode] if symcode in CODE_TO_IDX.keys() else 107 for symcode in codes]

    if len(index) == 0:
        return None

    # get <startcode>
    # code is coding type 0 - A, 1 - B, 2 - C
    # check counting check sum
    char = VALUES[index[0]][0]
    if char == '<StartCodeA>':
        code = 0
        check = 103
    elif char == '<StartCodeB>':
        code = 1
        check = 104
    elif char == '<StartCodeC>':
        code = 2
        check = 105
    else:
        return None

    # result += char

    # cor = True
    # check checksum
    # https://en.wikipedia.org/wiki/Code_128#Check_digit_calculation
    pos = 1
    for idx in index[1:-2]:
        check += pos * idx
        pos += 1
        if idx == 107:
            # cor = False
            return

    # at this point indexes can be returned

    # if not cor:
    #     return None

    # index[-2] stores checksum
    if (check - index[-2]) % 103 == 0:
        if checksum:
            print('Checksum good')
    else:
        return None


    # transform sym indexes to symbols
    for idx in index[1:-2]:
        char = VALUES[idx][code]
        if char == '<CodeA>':
            code = 0
        elif char == '<CodeB>':
            code = 1
        elif char == '<CodeC>':
            code = 2
        else:
            result += char

    return result


if __name__ == '__main__':
    # simple check
    print(len(DICT), len(CODE_TO_IDX), len(VALUES))